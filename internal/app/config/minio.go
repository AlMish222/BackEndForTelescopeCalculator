package config

import (
	"context"
	"log"

	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
)

var MinioClient *minio.Client

func InitMinio() {
	endpoint := "localhost:9000" // Nginx –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä MinIO
	accessKeyID := "minio"
	secretAccessKey := "minio124"
	useSSL := false

	client, err := minio.New(endpoint, &minio.Options{
		Creds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, ""),
		Secure: useSSL,
	})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MinIO: %v", err)
	}

	MinioClient = client
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MinIO —É—Å–ø–µ—à–Ω–æ")

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ bucket test —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	ctx := context.Background()
	exists, err := MinioClient.BucketExists(ctx, "test")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ bucket: %v", err)
	}
	if !exists {
		err = MinioClient.MakeBucket(ctx, "test", minio.MakeBucketOptions{})
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: %v", err)
		}
		log.Println("ü™£ Bucket 'test' —Å–æ–∑–¥–∞–Ω")
	} else {
		log.Println("ü™£ Bucket 'test' –Ω–∞–π–¥–µ–Ω")
	}
}
